from typing import Type

from aiogram import Router, F, flags, html, Bot
from aiogram.filters import MagicData
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from keyboards import settings_menu, cancel, inline_yes_no

router = Router()
router.message.filter(F.chat.type == "private")
router.message.filter(MagicData(F.user))


class UserSettings(StatesGroup):
	selecting_now = State()
	changing_now = State()


@router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def settings_handler(message: Message, state: FSMContext, user: Type) -> None:
	await message.answer(f'{html.bold("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")}\n–Ü–º\'—è: {user.name}\n–ü–æ—à—Ç–∞: {html.spoiler(user.email)}\n–ì—Ä—É–ø–∞: {user.group}', reply_markup=settings_menu.keyboard)
	await state.set_state(UserSettings.selecting_now)


@router.message(F.text == "üìù –õ—ñ—Ü–µ–Ω–∑—ñ—ó")
async def legal_handler(message: Message) -> None:
	await message.answer("TODO")


@router.message(F.text == "üîë –í–∏–π—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç—É")
async def logout_handler(message: Message) -> None:
	await message.answer("–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–π—Ç–∏ –∑ –∞–∫–∞—É–Ω—Ç—É? –í—Å—ñ –≤–∞—à—ñ –¥–∞–Ω—ñ –±—É–¥—É—Ç—å –≤–∏–¥–∞–ª–µ–Ω—ñ", reply_markup=inline_yes_no.keyboard("logout:"))


@router.callback_query(F.data == "logout:yes")
async def logout(callback: CallbackQuery, user: Type, bot: Bot):
	await user.delete()
	await callback.message.delete()
	await callback.answer("–£—Å–ø—ñ—à–Ω–æ!")
	await callback.message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é /login")


@router.callback_query(F.data == "logout:no")
@flags.show_main_menu
async def logout_cancel(callback: CallbackQuery, bot: Bot):
	await callback.message.delete()
	await callback.answer("OK", show_alert=True)


@router.message(F.text == "‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
@flags.show_main_menu
async def cancel_handler(message: Message, state: FSMContext) -> None:
	await state.clear()
	await message.answer("OK")


@router.message(UserSettings.selecting_now)
async def setting_selected(message: Message, state: FSMContext, user: Type) -> None:
	if message.text not in settings_menu.ANSWER_OPTIONS:
		return await message.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –¥—ñ—è", reply_markup=settings_menu.keyboard)

	await state.set_state(UserSettings.changing_now)

	selected_setting = settings_menu.ANSWER_OPTIONS.index(message.text)
	await state.update_data(selected_setting=selected_setting)

	msg = ""
	if selected_setting == 0:
		msg = "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –ø–æ—à—Ç—É:"
	elif selected_setting == 1:
		msg = "–í–≤–µ–¥—ñ—Ç—å –≤–∞—à—É –≥—Ä—É–ø—É —É —Ñ—Ä–æ–º–∞—Ç—ñ 1–•-–• (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: \"10-–ë\")"
	else:
		return await message.answer("–ù–µ–≤—ñ—Ä–Ω–∞ –¥—ñ—è", reply_markup=settings_menu.keyboard)

	await message.answer(msg, reply_markup=cancel.keyboard)


@router.message(UserSettings.changing_now, (F.text.regexp(r"^(1[0-2])-([–ê-–Ø])$") | F.text.endswith("ztu.edu.ua")))
@flags.show_main_menu
async def setting_changed(message: Message, state: FSMContext, user: Type) -> None:
	try:
		user_data = await state.get_data()
		selected_setting = user_data["selected_setting"]

		if selected_setting == 0:
			user.email = message.text
		elif selected_setting == 1:
			user.group = message.text

		await user.commit()

		await message.answer(f"–£—Å–ø—ñ—à–Ω–æ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è!")
		await state.clear()
	except Exception:
		await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó!")
